// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Registration.Data;

#nullable disable

namespace Registration.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240630095551_refreshtoken")]
    partial class refreshtoken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoursesDepartment", b =>
                {
                    b.Property<string>("CoursesCourseCode")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DepartmentsDepartmentCode")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CoursesCourseCode", "DepartmentsDepartmentCode");

                    b.HasIndex("DepartmentsDepartmentCode");

                    b.ToTable("CoursesDepartment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Registration.Models.ActiveCourses", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CourseHours")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.HasKey("CourseCode");

                    b.ToTable("ActiveCourses");
                });

            modelBuilder.Entity("Registration.Models.Admins", b =>
                {
                    b.Property<string>("AdminUserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("AdminFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.HasKey("AdminUserName");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Courses", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CourseActive")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.Property<string>("StudentsStudentId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CourseCode");

                    b.HasIndex("StudentsStudentId");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Department", b =>
                {
                    b.Property<string>("DepartmentCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("DepartmentGPA")
                        .HasColumnType("float");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.HasKey("DepartmentCode");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Level1", b =>
                {
                    b.Property<string>("CourseCode1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Level1Id")
                        .HasColumnType("int");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode1");

                    b.ToTable("Level1", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Level2", b =>
                {
                    b.Property<string>("CourseCode2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Level2Id")
                        .HasColumnType("int");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode2");

                    b.ToTable("Level2", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Level3", b =>
                {
                    b.Property<string>("CourseCode3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Level3Id")
                        .HasColumnType("int");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode3");

                    b.ToTable("Level3", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Level4", b =>
                {
                    b.Property<string>("CourseCode4")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Level4Id")
                        .HasColumnType("int");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode4");

                    b.ToTable("Level4", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Levels", b =>
                {
                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("LevelHoures")
                        .HasColumnType("int");

                    b.HasKey("LevelId");

                    b.ToTable("Levels", (string)null);
                });

            modelBuilder.Entity("Registration.Models.PreRequistes", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CourseCode1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("CourseCode2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("CourseCode3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.HasKey("CourseCode");

                    b.ToTable("PrerRequistes", (string)null);
                });

            modelBuilder.Entity("Registration.Models.RefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Registration.Models.RegistrationStudent", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Course1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Course2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Course3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Course4")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Course5")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Course6")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Course7")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Course8")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("RecordedHours")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.ToTable("RegistrationStudent", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Semster", b =>
                {
                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("SemsterHoures")
                        .HasColumnType("int");

                    b.HasKey("SemsterId");

                    b.HasIndex("LevelId");

                    b.ToTable("Semster", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Semster1", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode");

                    b.HasIndex("SemsterId")
                        .IsUnique();

                    b.ToTable("Semster1", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Semster2", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode");

                    b.HasIndex("SemsterId")
                        .IsUnique();

                    b.ToTable("Semster2", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Semster3", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode");

                    b.HasIndex("SemsterId")
                        .IsUnique();

                    b.ToTable("Semster3", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Semster4", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode");

                    b.HasIndex("SemsterId")
                        .IsUnique();

                    b.ToTable("Semster4", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Semster5", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode");

                    b.HasIndex("SemsterId")
                        .IsUnique();

                    b.ToTable("Semster5", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Semster6", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode");

                    b.HasIndex("SemsterId")
                        .IsUnique();

                    b.ToTable("Semster6", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Semster7", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode");

                    b.HasIndex("SemsterId")
                        .IsUnique();

                    b.ToTable("Semster7", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Semster8", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CourseHoures")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("SemsterId")
                        .HasColumnType("int");

                    b.HasKey("CourseCode");

                    b.HasIndex("SemsterId")
                        .IsUnique();

                    b.ToTable("Semster8", (string)null);
                });

            modelBuilder.Entity("Registration.Models.Students", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AllowedHoures")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("DepartmentCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<double>("GPA")
                        .HasColumnType("Float");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationReport")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("StudentFullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<int>("StudentHours")
                        .HasColumnType("int");

                    b.Property<string>("StudentPassword")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar");

                    b.HasKey("StudentId");

                    b.HasIndex("DepartmentCode");

                    b.HasIndex("LevelId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("CoursesDepartment", b =>
                {
                    b.HasOne("Registration.Models.Courses", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Registration.Models.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsDepartmentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Registration.Models.ActiveCourses", b =>
                {
                    b.HasOne("Registration.Models.Courses", "courses")
                        .WithOne("ActiveCourses")
                        .HasForeignKey("Registration.Models.ActiveCourses", "CourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("courses");
                });

            modelBuilder.Entity("Registration.Models.Courses", b =>
                {
                    b.HasOne("Registration.Models.Students", null)
                        .WithMany("Courses")
                        .HasForeignKey("StudentsStudentId");
                });

            modelBuilder.Entity("Registration.Models.Level1", b =>
                {
                    b.HasOne("Registration.Models.Courses", "Courses")
                        .WithOne("Level1")
                        .HasForeignKey("Registration.Models.Level1", "CourseCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Registration.Models.Level2", b =>
                {
                    b.HasOne("Registration.Models.Courses", "Courses")
                        .WithOne("Level2")
                        .HasForeignKey("Registration.Models.Level2", "CourseCode2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Registration.Models.Level3", b =>
                {
                    b.HasOne("Registration.Models.Courses", "Courses")
                        .WithOne("Level3")
                        .HasForeignKey("Registration.Models.Level3", "CourseCode3")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Registration.Models.Level4", b =>
                {
                    b.HasOne("Registration.Models.Courses", "Courses")
                        .WithOne("Level4")
                        .HasForeignKey("Registration.Models.Level4", "CourseCode4")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Registration.Models.PreRequistes", b =>
                {
                    b.HasOne("Registration.Models.Courses", "Courses")
                        .WithOne("PreRequistes")
                        .HasForeignKey("Registration.Models.PreRequistes", "CourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Registration.Models.RefreshToken", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Registration.Models.Semster", b =>
                {
                    b.HasOne("Registration.Models.Levels", "Levels")
                        .WithMany("Semsters")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("Registration.Models.Semster1", b =>
                {
                    b.HasOne("Registration.Models.Semster", "Semster")
                        .WithOne("Semster1")
                        .HasForeignKey("Registration.Models.Semster1", "SemsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semster");
                });

            modelBuilder.Entity("Registration.Models.Semster2", b =>
                {
                    b.HasOne("Registration.Models.Semster", "Semster")
                        .WithOne("Semster2")
                        .HasForeignKey("Registration.Models.Semster2", "SemsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semster");
                });

            modelBuilder.Entity("Registration.Models.Semster3", b =>
                {
                    b.HasOne("Registration.Models.Semster", "Semster")
                        .WithOne("Semster3")
                        .HasForeignKey("Registration.Models.Semster3", "SemsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semster");
                });

            modelBuilder.Entity("Registration.Models.Semster4", b =>
                {
                    b.HasOne("Registration.Models.Semster", "Semster")
                        .WithOne("Semster4")
                        .HasForeignKey("Registration.Models.Semster4", "SemsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semster");
                });

            modelBuilder.Entity("Registration.Models.Semster5", b =>
                {
                    b.HasOne("Registration.Models.Semster", "Semster")
                        .WithOne("Semster5")
                        .HasForeignKey("Registration.Models.Semster5", "SemsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semster");
                });

            modelBuilder.Entity("Registration.Models.Semster6", b =>
                {
                    b.HasOne("Registration.Models.Semster", "Semster")
                        .WithOne("Semster6")
                        .HasForeignKey("Registration.Models.Semster6", "SemsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semster");
                });

            modelBuilder.Entity("Registration.Models.Semster7", b =>
                {
                    b.HasOne("Registration.Models.Semster", "Semster")
                        .WithOne("Semster7")
                        .HasForeignKey("Registration.Models.Semster7", "SemsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semster");
                });

            modelBuilder.Entity("Registration.Models.Semster8", b =>
                {
                    b.HasOne("Registration.Models.Semster", "Semster")
                        .WithOne("Semster8")
                        .HasForeignKey("Registration.Models.Semster8", "SemsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semster");
                });

            modelBuilder.Entity("Registration.Models.Students", b =>
                {
                    b.HasOne("Registration.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentCode");

                    b.HasOne("Registration.Models.Levels", "Levels")
                        .WithMany("Students")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Registration.Models.RegistrationStudent", "RegistrationStudent")
                        .WithMany("students")
                        .HasForeignKey("StudentId");

                    b.Navigation("Department");

                    b.Navigation("Levels");

                    b.Navigation("RegistrationStudent");
                });

            modelBuilder.Entity("Registration.Models.Courses", b =>
                {
                    b.Navigation("ActiveCourses")
                        .IsRequired();

                    b.Navigation("Level1")
                        .IsRequired();

                    b.Navigation("Level2")
                        .IsRequired();

                    b.Navigation("Level3")
                        .IsRequired();

                    b.Navigation("Level4")
                        .IsRequired();

                    b.Navigation("PreRequistes")
                        .IsRequired();
                });

            modelBuilder.Entity("Registration.Models.Department", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Registration.Models.Levels", b =>
                {
                    b.Navigation("Semsters");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Registration.Models.RegistrationStudent", b =>
                {
                    b.Navigation("students");
                });

            modelBuilder.Entity("Registration.Models.Semster", b =>
                {
                    b.Navigation("Semster1")
                        .IsRequired();

                    b.Navigation("Semster2")
                        .IsRequired();

                    b.Navigation("Semster3")
                        .IsRequired();

                    b.Navigation("Semster4")
                        .IsRequired();

                    b.Navigation("Semster5")
                        .IsRequired();

                    b.Navigation("Semster6")
                        .IsRequired();

                    b.Navigation("Semster7")
                        .IsRequired();

                    b.Navigation("Semster8")
                        .IsRequired();
                });

            modelBuilder.Entity("Registration.Models.Students", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
